# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Principal
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/01-init-databases.sql
      - ./scripts/seed-data.sql:/docker-entrypoint-initdb.d/02-seed-data.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para Cache e Carrinho de Compras
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # RabbitMQ para Mensageria entre Serviços
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ecommerce_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: ecommerce
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./scripts/rabbitmq-definitions.json:/etc/rabbitmq/definitions.json
      - ./scripts/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Keycloak para Autenticação e Autorização
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: ecommerce_keycloak
    command: start-dev --import-realm
    environment:
      # Admin User
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      
      # Database Configuration
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: dev_password
      KC_DB_SCHEMA: public
      
      # Development Settings
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_LOG_LEVEL: INFO
      
      # Custom Configuration
      KC_FEATURES: token-exchange,admin-fine-grained-authz
    ports:
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch para Busca de Produtos (Opcional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ecommerce_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana para Visualização de Logs (Opcional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ecommerce_kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Jaeger para Distributed Tracing (Opcional)
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: ecommerce_jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
      - "14268:14268" # HTTP
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    networks:
      - ecommerce-network

  # Prometheus para Métricas (Opcional)
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: ecommerce_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ecommerce-network

  # Grafana para Dashboards (Opcional)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: ecommerce_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ecommerce-network

  # MinIO para Armazenamento de Arquivos (Opcional)
  minio:
    image: minio/minio:RELEASE.2023-12-07T04-16-00Z
    container_name: ecommerce_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    volumes:
      - minio_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # PgAdmin para Administração do PostgreSQL (Opcional)
  pgadmin:
    image: dpage/pgadmin4:7.8
    container_name: ecommerce_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ecommerce.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./scripts/pgadmin-servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    networks:
      - ecommerce-network

networks:
  ecommerce-network:
    driver: bridge
    name: ecommerce-network

volumes:
  postgres_data:
    name: ecommerce_postgres_data
  redis_data:
    name: ecommerce_redis_data
  rabbitmq_data:
    name: ecommerce_rabbitmq_data
  keycloak_data:
    name: ecommerce_keycloak_data
  elasticsearch_data:
    name: ecommerce_elasticsearch_data
  prometheus_data:
    name: ecommerce_prometheus_data
  grafana_data:
    name: ecommerce_grafana_data
  minio_data:
    name: ecommerce_minio_data
  pgadmin_data:
    name: ecommerce_pgadmin_data