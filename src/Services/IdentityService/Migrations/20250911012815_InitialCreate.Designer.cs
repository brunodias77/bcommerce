// <auto-generated />
using System;
using IdentityService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IdentityService.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20250911012815_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IdentityService.Events.DomainEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<Guid?>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("event_data");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("event_type")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasColumnName("event_type");

                    b.HasKey("EventId");

                    b.HasIndex("AggregateId")
                        .HasDatabaseName("idx_domain_events_aggregate_id");

                    b.HasIndex("OccurredAt")
                        .HasDatabaseName("idx_domain_events_occurred_at");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("idx_domain_events_processed_at")
                        .HasFilter("processed_at IS NULL");

                    b.HasIndex("event_type")
                        .HasDatabaseName("idx_domain_events_event_type");

                    b.ToTable("domain_events", (string)null);

                    b.HasDiscriminator<string>("event_type").HasValue("DomainEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("IdentityService.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("KeycloakUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("keycloak_user_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("KeycloakUserId")
                        .IsUnique()
                        .HasDatabaseName("idx_user_profiles_keycloak_user_id");

                    b.ToTable("user_profiles", (string)null);
                });

            modelBuilder.Entity("IdentityService.Events.UserProfileCreatedEvent", b =>
                {
                    b.HasBaseType("IdentityService.Events.DomainEvent");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<Guid>("KeycloakUserId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("keycloak_user_id");

                    b.Property<Guid>("ProfileId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.ToTable("domain_events");

                    b.HasDiscriminator().HasValue("UserProfileCreated");
                });

            modelBuilder.Entity("IdentityService.Events.UserProfileUpdatedEvent", b =>
                {
                    b.HasBaseType("IdentityService.Events.DomainEvent");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<Guid>("KeycloakUserId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("keycloak_user_id");

                    b.Property<Guid>("ProfileId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.ToTable("domain_events");

                    b.HasDiscriminator().HasValue("UserProfileUpdated");
                });

            modelBuilder.Entity("IdentityService.Models.UserProfile", b =>
                {
                    b.OwnsOne("IdentityService.Models.PersonName", "Name", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("last_name");

                            b1.HasKey("Id");

                            b1.ToTable("user_profiles");

                            b1.WithOwner()
                                .HasForeignKey("Id");
                        });

                    b.OwnsOne("IdentityService.Models.PhoneNumber", "Phone", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)")
                                .HasColumnName("phone_country_code");

                            b1.Property<string>("Number")
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("phone_number");

                            b1.HasKey("Id");

                            b1.ToTable("user_profiles");

                            b1.WithOwner()
                                .HasForeignKey("Id");
                        });

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Phone");
                });
#pragma warning restore 612, 618
        }
    }
}
